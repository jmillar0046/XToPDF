package com.xtopdf.xtopdf.services;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.mock.web.MockMultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.*;

class JpegToPdfServiceTest {

    private JpegToPdfService jpegToPdfService;

    @BeforeEach
    void setUp() {
        jpegToPdfService = new JpegToPdfService();
    }

    @Test
    void convertJpegToPdf_ValidJpeg_CreatesPdfFile() throws IOException {
        // Create a minimal valid JPEG file (1x1 pixel)
        byte[] jpegBytes = createMinimalJpegBytes();
        MockMultipartFile jpegFile = new MockMultipartFile("test.jpeg", "test.jpeg", "image/jpeg", jpegBytes);
        
        Path tempDir = Files.createTempDirectory("jpeg-test");
        File pdfFile = tempDir.resolve("output.pdf").toFile();
        
        try {
            jpegToPdfService.convertJpegToPdf(jpegFile, pdfFile);
            
            assertTrue(pdfFile.exists());
            assertTrue(pdfFile.length() > 0);
        } finally {
            if (pdfFile.exists()) {
                pdfFile.delete();
            }
            Files.deleteIfExists(tempDir);
        }
    }

    @Test
    void convertJpegToPdf_EmptyFile_ThrowsIOException() {
        MockMultipartFile emptyFile = new MockMultipartFile("empty.jpeg", "empty.jpeg", "image/jpeg", new byte[0]);
        File pdfFile = new File("output.pdf");
        
        assertThrows(IOException.class, () -> jpegToPdfService.convertJpegToPdf(emptyFile, pdfFile));
    }

    @Test
    void convertJpegToPdf_InvalidJpegData_ThrowsIOException() {
        byte[] invalidData = "Not a JPEG file".getBytes();
        MockMultipartFile invalidFile = new MockMultipartFile("invalid.jpeg", "invalid.jpeg", "image/jpeg", invalidData);
        File pdfFile = new File("output.pdf");
        
        assertThrows(IOException.class, () -> jpegToPdfService.convertJpegToPdf(invalidFile, pdfFile));
    }

    private byte[] createMinimalJpegBytes() {
        // This is a minimal valid JPEG file (1x1 pixel, RGB)
        return new byte[]{
            (byte) 0xFF, (byte) 0xD8, (byte) 0xFF, (byte) 0xE0, 0x00, 0x10, 0x4A, 0x46, 
            0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 
            (byte) 0xFF, (byte) 0xDB, 0x00, 0x43, 0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 
            0x05, 0x08, 0x07, 0x07, 0x07, 0x09, 0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 
            0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12, 0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 
            0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20, 0x24, 0x2E, 0x27, 0x20, 0x22, 0x2C, 
            0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29, 0x2C, 0x30, 0x31, 0x34, 0x34, 0x32, 
            0x34, 0x2E, 0x2E, 0x36, 0x3D, 0x28, 0x30, 0x39, 0x3C, 0x39, 0x33, 0x38, 
            0x37, 0x40, 0x48, 0x5C, 0x49, 0x40, 0x44, 0x57, 0x45, 0x37, 0x38, 0x50, 
            0x6D, 0x51, 0x57, 0x5F, 0x62, 0x67, 0x68, 0x67, 0x3E, 0x4D, 0x71, 0x79, 
            0x70, 0x64, 0x78, 0x5C, 0x65, 0x67, 0x63, (byte) 0xFF, (byte) 0xC0, 0x00, 
            0x11, 0x08, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11, 
            0x01, 0x03, 0x11, 0x01, (byte) 0xFF, (byte) 0xC4, 0x00, 0x14, 0x00, 0x01, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x08, (byte) 0xFF, (byte) 0xC4, 0x00, 0x14, 0x10, 0x01, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, (byte) 0xFF, (byte) 0xDA, 0x00, 0x0C, 0x03, 0x01, 
            0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, (byte) 0x80, (byte) 0xFF, 
            (byte) 0xD9
        };
    }
}